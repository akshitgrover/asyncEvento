{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"asyncEvento Fully asynhronous python library to listen and emit events like in nodejs Installation pip install asyncEvento Usage Read docs at: Docs Why asyncEvento Handling asynchronous coroutines can be painful at times, using asyncEvento one can register a function with a certain event and later can fire the event on completion of some asynchronous tasks, which will in turn lead to execute all the functions registered to the event which was fired. Read the Docs for more info Scope asyncEvento can be used in many areas where asynchronous tasks are to be handled with much ease. For eg: Asynchronous file handling Copyright Copyright 2018 Akshit Grover Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Home"},{"location":"#asyncevento","text":"Fully asynhronous python library to listen and emit events like in nodejs","title":"asyncEvento"},{"location":"#installation","text":"pip install asyncEvento","title":"Installation"},{"location":"#usage","text":"Read docs at: Docs","title":"Usage"},{"location":"#why-asyncevento","text":"Handling asynchronous coroutines can be painful at times, using asyncEvento one can register a function with a certain event and later can fire the event on completion of some asynchronous tasks, which will in turn lead to execute all the functions registered to the event which was fired. Read the Docs for more info","title":"Why asyncEvento"},{"location":"#scope","text":"asyncEvento can be used in many areas where asynchronous tasks are to be handled with much ease. For eg: Asynchronous file handling","title":"Scope"},{"location":"#copyright","text":"Copyright 2018 Akshit Grover Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Copyright"},{"location":"docs/","text":"How to Use asyncEvento asyncEvento lib follows a singleton pattern, A base class is used to extend or create emitter instances which are are further used to add as well as listen to certain events. EventoEmitter Class Base emitter class, Can be used both as extension and parent class. Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() # Single entrypoint of emitter methods < class >.setDefaultMaxListeners(n) {n:\"integer\"} Set number of listeners allowed on a all the event of every class instance, By default it is set to 11. Usage: from asyncEvento import EventoEmitter emitter1 = EventoEmitter() # Will have 11 listeners allowed for each event EventoEmitter.setMaxListeners(16) # Will set default listeners count to 16 emitter2 = EventoEmitter() # Will have 16 listeners allowed for each event emitter3 = EventoEmitter() # Will have 16 listeners allowed for each event < class >.listen() Start the event loop, You can choose no to use this method, by running your own loop instead. Note: This event loop will be common for all the emitter instances created. Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() # Single entrypoint of emitter methods < instance >.setMaxListeners(n) {n:\"integer\"} This method is used to setMaxListener for a specific instance of emitter class. Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() # Single entrypoint of emitter methods emitter.setMaxListener(16) < instance >.getEvents() Return an array of all the events having a listener attached. Note: Will include 'error' by default. Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() # Single entrypoint of emitter methods print(emitter.getEvents()) # [\"error\"] < instance >.on(eventName, func) {eventName:\"string\", func:\"function\"} Attaches a listener to an event. Note: Everytime an event is fired the listener attached will run. Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() # Single entrypoint of emitter methods def hello(): print(\"Hello node\") emitter.on(\"hello\", hello) < instance >.once(eventName, func) {eventName:\"string\", func:\"function\"} Attaches a listener to an event. Note: This function ran only once no matter how many times an event is emitted. Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() # Single entrypoint of emitter methods def hello(): print(\"Hello node\") emitter.once(\"hello\", hello) < instance >.removeListener(eventName, func) {eventName:\"string\", func:\"function\"} Removes a previosly attached listener. Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() # Single entrypoint of emitter methods def hello(): print(\"Hello node\") emitter.on(\"hello\", hello) emitter.removeListener(\"hello\", hello) < instance >.getMaxListeners() Returns the number of listeners allowed for this instance per event. Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() print(emitter.getMaxListeners()) # 11 (Default, see setMaxListeners) < instance >.listenerCount(eventName) {eventName:\"string\"} Returns the number of listeners allowed for this instance on a certain event. Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() def hello(): print(\"Hello node\") emitter.on(\"hello\", hello) emitter.on(\"hello\", hello) print(emitter.listenerCount(\"hello\")) # 2 < instance >.listeners(eventName) {eventName:\"string\"} Returns underlying functions registers as listeners on a particular event. Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() def hello(): print(\"Hello node\") emitter.on(\"hello\", hello) emitter.on(\"hello\", hello) print(emitter.listeners(\"hello\")) # <function> object < instance >.emit(eventName, asynchronous = False, *params) {eventName:\"string\", params:\"argumentsto be passed in registered functions\", asynchronous:\"flag to control if registered functions are to be executed asynchronously or not\"} Usage: Synchronous from asyncEvento import EventoEmitter emitter = EventoEmitter() def hello(): print(\"Hello node\") def helloV2(): print(\"Hello world\") emitter.on(\"hello\", hello) emitter.on(\"hello\", helloV2) emitter.once(\"hello\", helloV2) emitter.emit(\"hello\") emitter.listen() # Start the event loop \"\"\" Output: Hello node Hello world Hello world \"\"\" Asynchronous from asyncEvento import EventoEmitter import asyncio emitter = EventoEmitter() async def hello(): print(\"Hello node\") async def helloV2(): await asyncio.sleep(1) print(\"Hello world\") emitter.on(\"hello\", helloV2) emitter.once(\"hello\", helloV2) emitter.on(\"hello\", hello) emitter.emit(\"hello\", True) emitter.listen() #Start the event loop \"\"\" Output: Hello node Hello world Hello world \"\"\"","title":"Docs"},{"location":"docs/#how-to-use-asyncevento","text":"asyncEvento lib follows a singleton pattern, A base class is used to extend or create emitter instances which are are further used to add as well as listen to certain events.","title":"How to Use asyncEvento"},{"location":"docs/#eventoemitter-class","text":"","title":"EventoEmitter Class"},{"location":"docs/#base-emitter-class-can-be-used-both-as-extension-and-parent-class","text":"Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() # Single entrypoint of emitter methods","title":"Base emitter class, Can be used both as extension and parent class."},{"location":"docs/#class-setdefaultmaxlistenersn","text":"","title":"&lt; class &gt;.setDefaultMaxListeners(n)"},{"location":"docs/#ninteger","text":"","title":"{n:\"integer\"} "},{"location":"docs/#set-number-of-listeners-allowed-on-a-all-the-event-of-every-class-instance-by-default-it-is-set-to-11","text":"Usage: from asyncEvento import EventoEmitter emitter1 = EventoEmitter() # Will have 11 listeners allowed for each event EventoEmitter.setMaxListeners(16) # Will set default listeners count to 16 emitter2 = EventoEmitter() # Will have 16 listeners allowed for each event emitter3 = EventoEmitter() # Will have 16 listeners allowed for each event","title":"Set number of listeners allowed on a all the event of every class instance, By default it is set to 11."},{"location":"docs/#class-listen","text":"Start the event loop, You can choose no to use this method, by running your own loop instead. Note: This event loop will be common for all the emitter instances created. Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() # Single entrypoint of emitter methods","title":"&lt; class &gt;.listen()"},{"location":"docs/#instance-setmaxlistenersn","text":"","title":"&lt; instance &gt;.setMaxListeners(n)"},{"location":"docs/#ninteger_1","text":"","title":"{n:\"integer\"} "},{"location":"docs/#this-method-is-used-to-setmaxlistener-for-a-specific-instance-of-emitter-class","text":"Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() # Single entrypoint of emitter methods emitter.setMaxListener(16)","title":"This method is used to setMaxListener for a specific instance of emitter class."},{"location":"docs/#instance-getevents","text":"Return an array of all the events having a listener attached. Note: Will include 'error' by default. Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() # Single entrypoint of emitter methods print(emitter.getEvents()) # [\"error\"]","title":"&lt; instance &gt;.getEvents()"},{"location":"docs/#instance-oneventname-func","text":"","title":"&lt; instance &gt;.on(eventName, func)"},{"location":"docs/#eventnamestring-funcfunction","text":"","title":"{eventName:\"string\", func:\"function\"} "},{"location":"docs/#attaches-a-listener-to-an-event","text":"Note: Everytime an event is fired the listener attached will run. Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() # Single entrypoint of emitter methods def hello(): print(\"Hello node\") emitter.on(\"hello\", hello)","title":"Attaches a listener to an event."},{"location":"docs/#instance-onceeventname-func","text":"","title":"&lt; instance &gt;.once(eventName, func)"},{"location":"docs/#eventnamestring-funcfunction_1","text":"","title":"{eventName:\"string\", func:\"function\"} "},{"location":"docs/#attaches-a-listener-to-an-event_1","text":"Note: This function ran only once no matter how many times an event is emitted. Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() # Single entrypoint of emitter methods def hello(): print(\"Hello node\") emitter.once(\"hello\", hello)","title":"Attaches a listener to an event."},{"location":"docs/#instance-removelistenereventname-func","text":"","title":"&lt; instance &gt;.removeListener(eventName, func)"},{"location":"docs/#eventnamestring-funcfunction_2","text":"","title":"{eventName:\"string\", func:\"function\"}"},{"location":"docs/#removes-a-previosly-attached-listener","text":"Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() # Single entrypoint of emitter methods def hello(): print(\"Hello node\") emitter.on(\"hello\", hello) emitter.removeListener(\"hello\", hello)","title":"Removes a previosly attached listener."},{"location":"docs/#instance-getmaxlisteners","text":"","title":"&lt; instance &gt;.getMaxListeners()"},{"location":"docs/#returns-the-number-of-listeners-allowed-for-this-instance-per-event","text":"Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() print(emitter.getMaxListeners()) # 11 (Default, see setMaxListeners)","title":"Returns the number of listeners allowed for this instance per event."},{"location":"docs/#instance-listenercounteventname","text":"","title":"&lt; instance &gt;.listenerCount(eventName)"},{"location":"docs/#eventnamestring","text":"","title":"{eventName:\"string\"} "},{"location":"docs/#returns-the-number-of-listeners-allowed-for-this-instance-on-a-certain-event","text":"Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() def hello(): print(\"Hello node\") emitter.on(\"hello\", hello) emitter.on(\"hello\", hello) print(emitter.listenerCount(\"hello\")) # 2","title":"Returns the number of listeners allowed for this instance on a certain event."},{"location":"docs/#instance-listenerseventname","text":"","title":"&lt; instance &gt;.listeners(eventName)"},{"location":"docs/#eventnamestring_1","text":"","title":"{eventName:\"string\"} "},{"location":"docs/#returns-underlying-functions-registers-as-listeners-on-a-particular-event","text":"Usage: from asyncEvento import EventoEmitter emitter = EventoEmitter() def hello(): print(\"Hello node\") emitter.on(\"hello\", hello) emitter.on(\"hello\", hello) print(emitter.listeners(\"hello\")) # <function> object","title":"Returns underlying functions registers as listeners on a particular event."},{"location":"docs/#instance-emiteventname-asynchronous-false-params","text":"","title":"&lt; instance &gt;.emit(eventName, asynchronous = False, *params)"},{"location":"docs/#eventnamestring-paramsargumentsto-be-passed-in-registered-functions-asynchronousflag-to-control-if-registered-functions-are-to-be-executed-asynchronously-or-not","text":"Usage: Synchronous from asyncEvento import EventoEmitter emitter = EventoEmitter() def hello(): print(\"Hello node\") def helloV2(): print(\"Hello world\") emitter.on(\"hello\", hello) emitter.on(\"hello\", helloV2) emitter.once(\"hello\", helloV2) emitter.emit(\"hello\") emitter.listen() # Start the event loop \"\"\" Output: Hello node Hello world Hello world \"\"\" Asynchronous from asyncEvento import EventoEmitter import asyncio emitter = EventoEmitter() async def hello(): print(\"Hello node\") async def helloV2(): await asyncio.sleep(1) print(\"Hello world\") emitter.on(\"hello\", helloV2) emitter.once(\"hello\", helloV2) emitter.on(\"hello\", hello) emitter.emit(\"hello\", True) emitter.listen() #Start the event loop \"\"\" Output: Hello node Hello world Hello world \"\"\"","title":"{eventName:\"string\", params:\"argumentsto be passed in registered functions\", asynchronous:\"flag to control if registered functions are to be executed asynchronously or not\"}"}]}